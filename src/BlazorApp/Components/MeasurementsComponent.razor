@using BDA.Common.Exchange.Model.ConfigApp
@using Biss.Apps
@using System.ComponentModel
@using BaseApp.Helper
@using Exchange.Model.ConfigApp
@using BaseApp.Connectivity
<RadzenStack Gap="10px">
    @if (MeasurementDefinitions?.Any() ?? false)
    {
        @foreach (var measurement in MeasurementDefinitions)
        {
            <RadzenCard>
                <MeasurementDetailsComponent MeasurementDefinition="measurement"
                                             IsSelectable="@CanSubscribe"
                                             IsEditable="@(!CanSubscribe)"/>
            </RadzenCard>
        }

        if (CanSubscribe)
        {
            var allSensorDataName = "allSensorData";
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal" Gap="3px">
                    <RadzenCheckBox TValue="bool" ValueChanged="SelectAllSensorData" Name="@allSensorDataName"/>
                    <RadzenLabel Component="@allSensorDataName" Text="Alle Sensordaten"/>
                </RadzenStack>
                <RadzenText Text="@($"{MeasurementDefinitions.Sum(x => ExMesDefAssignHelper.GetAssignment(x, VmProjectBase.GetVmBaseStatic.Dc).Data.Costs)} {ResCommon.TxtIxiesPerDay}")"/>
            </RadzenStack>

            <BxButton BissCommand="CmdSubscribe"
                      ExecutionParameter="MeasurementDefinitions"
                      BxButtonType="EnumBxButtonType.JustText"
                      ForceText="@($"{ResViewEditAbo.TxtSubscribeFor} {MeasurementDefinitions.Where(x => x.IsSelected).Sum(x => ExMesDefAssignHelper.GetAssignment(x, VmProjectBase.GetVmBaseStatic.Dc).Data.Costs)} {ResCommon.TxtIxies}")"/>
        }
    }
    else
    {
        <RadzenText Text="@ResViewEditAbo.TxtNoSensorsAvailable"/>
    }
</RadzenStack>

@code {

    /// <summary>
    /// Messwerte
    /// </summary>
    [Parameter]
    [EditorRequired]
    public IEnumerable<ExMeasurementDefinition> MeasurementDefinitions { get; set; } = new List<ExMeasurementDefinition>();

    /// <summary>
    /// Ob Messwerte abonniert werden können
    /// </summary>
    [Parameter]
    public bool CanSubscribe { get; set; }

    /// <summary>
    /// Command für Abonnieren
    /// </summary>
    private VmCommand? CmdSubscribe { get; set; }

    /// <summary>
    /// Alle Sensordaten selektieren
    /// </summary>
    /// <param name="value"></param>
    private void SelectAllSensorData(bool value)
    {
        if (MeasurementDefinitions is null)
            return;

        foreach (var dataMeasurementDefinition in MeasurementDefinitions)
        {
            dataMeasurementDefinition.IsSelected = value;
        }
    }

    /// <summary>
    /// Method invoked when the component is ready to start, having received its
    /// initial parameters from its parent in the render tree.
    /// Override this method if you will perform an asynchronous operation and
    /// want the component to refresh when that operation is completed.
    /// </summary>
    /// <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        InitializeCommands();
        //await VmProjectBase.GetVmBaseStatic.Dc.DcExMeasurementDefinitionAssignments.WaitDataFromServerAsync(reload: true).ConfigureAwait(true);

        var ll = VmProjectBase.GetVmBaseStatic.Dc.DcExMeasurementDefinitionAssignments.ToList();
        var ooo = VmProjectBase.GetVmBaseStatic.Dc.DcExMeasurementDefinitionAssignments.Where(mA => mA.Data.Id == 0);

        AttachDetachEvents(true);
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Messwertdefinition OnPropertyChanged
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    private void DataMeasurementDefinitionOnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(ExMeasurementDefinition.IsSelected))
        {
            StateHasChanged();
        }
    }

    /// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    public void Dispose()
    {
        AttachDetachEvents(false);
    }

    /// <summary>
    /// An oder abhaengen der Events
    /// </summary>
    /// <param name="attach">true = an-, false = abhaengen</param>
    private void AttachDetachEvents(bool attach)
    {
        foreach (var dataMeasurementDefinition in MeasurementDefinitions)
        {
            if (attach)
            {
                dataMeasurementDefinition.PropertyChanged += DataMeasurementDefinitionOnPropertyChanged;
            }
            else
            {
                dataMeasurementDefinition.PropertyChanged -= DataMeasurementDefinitionOnPropertyChanged;
            }
        }
    }

    /// <summary>
    /// Commands initialisieren
    /// </summary>
    private void InitializeCommands()
    {
        CmdSubscribe = new VmCommand(ResViewEditAbo.TxtSubscribe, async arg =>
        {
            IEnumerable<ExMeasurementDefinition> measurementDefinitions = new List<ExMeasurementDefinition>();

            if (arg is IEnumerable<ExMeasurementDefinition> measurementDefinitionsEnumerable)
            {
                measurementDefinitions = measurementDefinitionsEnumerable;
            }

            if (arg is ExMeasurementDefinition measurementDefinition)
            {
                measurementDefinitions = new List<ExMeasurementDefinition> {measurementDefinition};
            }

            var changed = false;
            foreach (var exMeasurementDefinition in measurementDefinitions)
            {
                var datapoint = VmProjectBase.GetVmBaseStatic.Dc.DcExAbos.FirstOrDefault(x => x.Data.User.Id == VmProjectBase.GetVmBaseStatic.Dc.DcExUser.Data.Id && x.Data.MeasurementDefinitionAssignment.Id == ExMesDefAssignHelper.GetAssignment(exMeasurementDefinition, VmProjectBase.GetVmBaseStatic.Dc).Data.Id);

                if (exMeasurementDefinition.IsSelected)
                {
                    //abonnieren wenn noch nicht abonniert
                    if (datapoint is null)
                    {
                        datapoint = new DcListTypeAbo(new ExAbo
                                                      {
                                                          MeasurementDefinitionAssignment = ExMesDefAssignHelper.GetAssignment(exMeasurementDefinition, VmProjectBase.GetVmBaseStatic.Dc).Data,
                                                          User = VmProjectBase.GetVmBaseStatic.Dc.DcExUser.Data,
                                                      });

                        VmProjectBase.GetVmBaseStatic.Dc.DcExAbos.Add(datapoint);
                        changed = true;
                    }
                }
                else
                {
                    //deabonnieren falls abonniert
                    if (datapoint != null)
                    {
                        VmProjectBase.GetVmBaseStatic.Dc.DcExAbos.Remove(datapoint);
                        changed = true;
                    }
                }
            }

            if (changed)
            {
                VmProjectBase.GetVmBaseStatic.View.BusySet(ResCommon.MsgPleaseWait, 0);
                await VmProjectBase.GetVmBaseStatic.Dc.DcExAbos.StoreAll().ConfigureAwait(true);
                await VmProjectBase.GetVmBaseStatic.Dc.DcExAbos.Sync().ConfigureAwait(true);
                VmProjectBase.GetVmBaseStatic.View.BusyClear(true);
            }
            else
            {
                await VmBase.MsgBox.Show(ResViewMain.MsgBoxNoChangesMade, icon: VmMessageBoxImage.Information).ConfigureAwait(true);
            }
        });
    }

}