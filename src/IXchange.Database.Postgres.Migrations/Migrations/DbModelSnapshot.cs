// <auto-generated />
using System;
using IXchangeDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Postgres.Migrations
{
    [DbContext(typeof(Db))]
    partial class DbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Tables.TableAccessToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("GuiltyUntilUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TblUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TblUserId");

                    b.ToTable("AccessToken");
                });

            modelBuilder.Entity("Database.Tables.TableCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CompanyType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Database.Tables.TableCompanyGlobalConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalConfiguration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ConfigVersion")
                        .HasColumnType("bigint");

                    b.Property<int>("GlobalConfigType")
                        .HasColumnType("integer");

                    b.Property<long>("TblCompanyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TblCompanyId");

                    b.ToTable("CompanyGlobalConfig");
                });

            modelBuilder.Entity("Database.Tables.TableDataconverter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CodeSnippet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Displayname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Dataconverter");
                });

            modelBuilder.Entity("Database.Tables.TableDevice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AppVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeviceHardwareId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DeviceIdiom")
                        .HasColumnType("integer");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAppRunning")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastDateTimeUtcOnline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OperatingSystemVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Plattform")
                        .HasColumnType("integer");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("ScreenResolution")
                        .HasColumnType("text");

                    b.Property<long?>("TblUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TblUserId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("Database.Tables.TableFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Bytes")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PublicLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("File");
                });

            modelBuilder.Entity("Database.Tables.TableGateway", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalConfiguration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdditionalProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TblCompanyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TblCompanyId");

                    b.ToTable("Gateway");
                });

            modelBuilder.Entity("Database.Tables.TableIotDevice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalConfiguration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdditionalProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MeasurementInterval")
                        .HasColumnType("integer");

                    b.Property<int>("Plattform")
                        .HasColumnType("integer");

                    b.Property<bool>("SuccessfullyRegisteredInThirdPartySystem")
                        .HasColumnType("boolean");

                    b.Property<long?>("TblCompanyGlobalConfigId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TblDataconverterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TblGatewayId")
                        .HasColumnType("bigint");

                    b.Property<int>("TransmissionInterval")
                        .HasColumnType("integer");

                    b.Property<int>("TransmissionType")
                        .HasColumnType("integer");

                    b.Property<int>("Upstream")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TblCompanyGlobalConfigId");

                    b.HasIndex("TblDataconverterId");

                    b.HasIndex("TblGatewayId");

                    b.ToTable("IotDevice");
                });

            modelBuilder.Entity("Database.Tables.TableMeasurementDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalConfiguration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdditionalProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DownstreamType")
                        .HasColumnType("integer");

                    b.Property<int>("MeasurementInterval")
                        .HasColumnType("integer");

                    b.Property<long>("TblIotDeviceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TblLatestMeasurementResultId")
                        .HasColumnType("bigint");

                    b.Property<int>("ValueType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TblIotDeviceId");

                    b.ToTable("MeasurementDefinition");
                });

            modelBuilder.Entity("Database.Tables.TableMeasurementDefinitionTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("TblDataconverterId")
                        .HasColumnType("bigint");

                    b.Property<int>("ValueType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TblDataconverterId");

                    b.ToTable("MeasurementDefinitionTemplate");
                });

            modelBuilder.Entity("Database.Tables.TableMeasurementDefinitionToProjectAssignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("TblMeasurementDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TblProjctId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TblMeasurementDefinitionId");

                    b.HasIndex("TblProjctId");

                    b.ToTable("MeasurementDefinitionToProjectAssignment");
                });

            modelBuilder.Entity("Database.Tables.TableMeasurementResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalConfiguration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdditionalProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Point>("SpatialPoint")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<long>("TblMeasurementDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ValueType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TblMeasurementDefinitionId");

                    b.ToTable("MeasurementResult");
                });

            modelBuilder.Entity("Database.Tables.TablePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalConfiguration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdditionalProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TblCompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("TblUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserRight")
                        .HasColumnType("integer");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TblCompanyId");

                    b.HasIndex("TblUserId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Database.Tables.TableProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TblCompanyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TblCompanyId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Database.Tables.TableSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Key")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Database.Tables.TableUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AgbVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConfirmationToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultLanguage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean");

                    b.Property<bool>("LoginConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PushTags")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Setting10MinPush")
                        .HasColumnType("boolean");

                    b.Property<long?>("TblUserImageId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TblUserImageId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("IXchangeDatabase.Tables.TableAbo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("DataVersion")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("ExceedNotify")
                        .HasColumnType("boolean");

                    b.Property<float>("ExceedNotifyValue")
                        .HasColumnType("real");

                    b.Property<bool>("FailureForMinutesNotify")
                        .HasColumnType("boolean");

                    b.Property<float>("FailureForMinutesNotifyValue")
                        .HasColumnType("real");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("MovingAverageNotify")
                        .HasColumnType("boolean");

                    b.Property<float>("MovingAverageNotifyValue")
                        .HasColumnType("real");

                    b.Property<long>("TblMeasurementDefinitionAssignmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TblUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("UndercutNotify")
                        .HasColumnType("boolean");

                    b.Property<float>("UndercutNotifyValue")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("TblMeasurementDefinitionAssignmentId");

                    b.HasIndex("TblUserId");

                    b.ToTable("TblAbos");
                });

            modelBuilder.Entity("IXchangeDatabase.Tables.TableIncomeOutput", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CurrentTotalIxies")
                        .HasColumnType("integer");

                    b.Property<byte[]>("DataVersion")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<int>("Ixies")
                        .HasColumnType("integer");

                    b.Property<int>("Option")
                        .HasColumnType("integer");

                    b.Property<long?>("TblMeasurementDefinitonId")
                        .HasColumnType("bigint");

                    b.Property<long>("TblUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TblMeasurementDefinitonId");

                    b.HasIndex("TblUserId");

                    b.ToTable("TblIncomeOutputs");
                });

            modelBuilder.Entity("IXchangeDatabase.Tables.TableMeasurementDefinitionAssignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AccessForResearchInstitutesGranted")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("DataVersion")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotificationOnNewRating")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotificationOnSubscription")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotificationOnUnsubscription")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendNotifications")
                        .HasColumnType("boolean");

                    b.Property<long>("TblMeasurementDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TblMeasurementDefinitionId");

                    b.ToTable("MeasurementDefinitionAssignment");
                });

            modelBuilder.Entity("IXchangeDatabase.Tables.TableNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("DataVersion")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<long>("TblMeasurementDefinitionAssignmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TblUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TblMeasurementDefinitionAssignmentId");

                    b.HasIndex("TblUserId");

                    b.ToTable("TblNotifications");
                });

            modelBuilder.Entity("IXchangeDatabase.Tables.TableRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("DataVersion")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<long>("TblMeasurementDefinitionAssignmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TblUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TblMeasurementDefinitionAssignmentId");

                    b.HasIndex("TblUserId");

                    b.ToTable("TblRatings");
                });

            modelBuilder.Entity("IXchangeDatabase.Tables.TableResearchInstitutesAccess", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("DataVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("ResearchInstituteName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TableResearchInstitutesAccess");
                });

            modelBuilder.Entity("Database.Tables.TableAccessToken", b =>
                {
                    b.HasOne("Database.Tables.TableUser", "TblUser")
                        .WithMany("TblAccessToken")
                        .HasForeignKey("TblUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblUser");
                });

            modelBuilder.Entity("Database.Tables.TableCompany", b =>
                {
                    b.OwnsOne("Database.Common.DbInformation", "Information", b1 =>
                        {
                            b1.Property<long>("TableCompanyId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("TableCompanyId");

                            b1.ToTable("Company");

                            b1.WithOwner()
                                .HasForeignKey("TableCompanyId");
                        });

                    b.Navigation("Information")
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Tables.TableCompanyGlobalConfig", b =>
                {
                    b.HasOne("Database.Tables.TableCompany", "TblCompany")
                        .WithMany("TblCompanyGlobalConfigurations")
                        .HasForeignKey("TblCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Database.Common.DbInformation", "Information", b1 =>
                        {
                            b1.Property<long>("TableCompanyGlobalConfigId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("TableCompanyGlobalConfigId");

                            b1.ToTable("CompanyGlobalConfig");

                            b1.WithOwner()
                                .HasForeignKey("TableCompanyGlobalConfigId");
                        });

                    b.Navigation("Information")
                        .IsRequired();

                    b.Navigation("TblCompany");
                });

            modelBuilder.Entity("Database.Tables.TableDevice", b =>
                {
                    b.HasOne("Database.Tables.TableUser", "TblUser")
                        .WithMany("TblDevices")
                        .HasForeignKey("TblUserId");

                    b.Navigation("TblUser");
                });

            modelBuilder.Entity("Database.Tables.TableGateway", b =>
                {
                    b.HasOne("Database.Tables.TableCompany", "TblCompany")
                        .WithMany("TblGateways")
                        .HasForeignKey("TblCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Database.Common.DbDeviceCommon", "DeviceCommon", b1 =>
                        {
                            b1.Property<long>("TableGatewayId")
                                .HasColumnType("bigint");

                            b1.Property<long>("ConfigversionDevice")
                                .HasColumnType("bigint");

                            b1.Property<long>("ConfigversionService")
                                .HasColumnType("bigint");

                            b1.Property<string>("FirmwareversionDevice")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FirmwareversionService")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("LastOfflineTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("LastOnlineTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Secret")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("State")
                                .HasColumnType("integer");

                            b1.HasKey("TableGatewayId");

                            b1.ToTable("Gateway");

                            b1.WithOwner()
                                .HasForeignKey("TableGatewayId");
                        });

                    b.OwnsOne("Database.Common.DbInformation", "Information", b1 =>
                        {
                            b1.Property<long>("TableGatewayId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("TableGatewayId");

                            b1.ToTable("Gateway");

                            b1.WithOwner()
                                .HasForeignKey("TableGatewayId");
                        });

                    b.OwnsOne("Database.Common.DbPosition", "Position", b1 =>
                        {
                            b1.Property<long>("TableGatewayId")
                                .HasColumnType("bigint");

                            b1.Property<double>("Altitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Precision")
                                .HasColumnType("double precision");

                            b1.Property<int>("Source")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("TimeStamp")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("TableGatewayId");

                            b1.ToTable("Gateway");

                            b1.WithOwner()
                                .HasForeignKey("TableGatewayId");
                        });

                    b.Navigation("DeviceCommon")
                        .IsRequired();

                    b.Navigation("Information")
                        .IsRequired();

                    b.Navigation("Position")
                        .IsRequired();

                    b.Navigation("TblCompany");
                });

            modelBuilder.Entity("Database.Tables.TableIotDevice", b =>
                {
                    b.HasOne("Database.Tables.TableCompanyGlobalConfig", "TblCompanyGlobalConfigs")
                        .WithMany("TblIotDevice")
                        .HasForeignKey("TblCompanyGlobalConfigId");

                    b.HasOne("Database.Tables.TableDataconverter", "TblDataconverter")
                        .WithMany()
                        .HasForeignKey("TblDataconverterId");

                    b.HasOne("Database.Tables.TableGateway", "TblGateway")
                        .WithMany("TblIotDevices")
                        .HasForeignKey("TblGatewayId");

                    b.OwnsOne("Database.Common.DbDeviceCommon", "DeviceCommon", b1 =>
                        {
                            b1.Property<long>("TableIotDeviceId")
                                .HasColumnType("bigint");

                            b1.Property<long>("ConfigversionDevice")
                                .HasColumnType("bigint");

                            b1.Property<long>("ConfigversionService")
                                .HasColumnType("bigint");

                            b1.Property<string>("FirmwareversionDevice")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FirmwareversionService")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("LastOfflineTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("LastOnlineTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Secret")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("State")
                                .HasColumnType("integer");

                            b1.HasKey("TableIotDeviceId");

                            b1.ToTable("IotDevice");

                            b1.WithOwner()
                                .HasForeignKey("TableIotDeviceId");
                        });

                    b.OwnsOne("Database.Common.DbPosition", "FallbackPosition", b1 =>
                        {
                            b1.Property<long>("TableIotDeviceId")
                                .HasColumnType("bigint");

                            b1.Property<double>("Altitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Precision")
                                .HasColumnType("double precision");

                            b1.Property<int>("Source")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("TimeStamp")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("TableIotDeviceId");

                            b1.ToTable("IotDevice");

                            b1.WithOwner()
                                .HasForeignKey("TableIotDeviceId");
                        });

                    b.OwnsOne("Database.Common.DbInformation", "Information", b1 =>
                        {
                            b1.Property<long>("TableIotDeviceId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("TableIotDeviceId");

                            b1.ToTable("IotDevice");

                            b1.WithOwner()
                                .HasForeignKey("TableIotDeviceId");
                        });

                    b.Navigation("DeviceCommon")
                        .IsRequired();

                    b.Navigation("FallbackPosition")
                        .IsRequired();

                    b.Navigation("Information")
                        .IsRequired();

                    b.Navigation("TblCompanyGlobalConfigs");

                    b.Navigation("TblDataconverter");

                    b.Navigation("TblGateway");
                });

            modelBuilder.Entity("Database.Tables.TableMeasurementDefinition", b =>
                {
                    b.HasOne("Database.Tables.TableIotDevice", "TblIoTDevice")
                        .WithMany("TblMeasurementDefinitions")
                        .HasForeignKey("TblIotDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Database.Common.DbInformation", "Information", b1 =>
                        {
                            b1.Property<long>("TableMeasurementDefinitionId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("TableMeasurementDefinitionId");

                            b1.ToTable("MeasurementDefinition");

                            b1.WithOwner()
                                .HasForeignKey("TableMeasurementDefinitionId");
                        });

                    b.Navigation("Information")
                        .IsRequired();

                    b.Navigation("TblIoTDevice");
                });

            modelBuilder.Entity("Database.Tables.TableMeasurementDefinitionTemplate", b =>
                {
                    b.HasOne("Database.Tables.TableDataconverter", "TblDataconverter")
                        .WithMany("Templates")
                        .HasForeignKey("TblDataconverterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Database.Common.DbInformation", "Information", b1 =>
                        {
                            b1.Property<long>("TableMeasurementDefinitionTemplateId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("TableMeasurementDefinitionTemplateId");

                            b1.ToTable("MeasurementDefinitionTemplate");

                            b1.WithOwner()
                                .HasForeignKey("TableMeasurementDefinitionTemplateId");
                        });

                    b.Navigation("Information")
                        .IsRequired();

                    b.Navigation("TblDataconverter");
                });

            modelBuilder.Entity("Database.Tables.TableMeasurementDefinitionToProjectAssignment", b =>
                {
                    b.HasOne("Database.Tables.TableMeasurementDefinition", "TblMeasurmentDefinitions")
                        .WithMany("TblMeasurementDefinitionToProjectAssignments")
                        .HasForeignKey("TblMeasurementDefinitionId");

                    b.HasOne("Database.Tables.TableProject", "TblProjcts")
                        .WithMany("TblMeasurementDefinitionToProjectAssignments")
                        .HasForeignKey("TblProjctId");

                    b.Navigation("TblMeasurmentDefinitions");

                    b.Navigation("TblProjcts");
                });

            modelBuilder.Entity("Database.Tables.TableMeasurementResult", b =>
                {
                    b.HasOne("Database.Tables.TableMeasurementDefinition", "TblMeasurementDefinition")
                        .WithMany("TblMeasurements")
                        .HasForeignKey("TblMeasurementDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Database.Common.DbValue", "Value", b1 =>
                        {
                            b1.Property<long>("TableMeasurementResultId")
                                .HasColumnType("bigint");

                            b1.Property<byte[]>("Binary")
                                .HasColumnType("bytea");

                            b1.Property<bool?>("Bit")
                                .HasColumnType("boolean");

                            b1.Property<double?>("Number")
                                .HasColumnType("double precision");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TableMeasurementResultId");

                            b1.ToTable("MeasurementResult");

                            b1.WithOwner()
                                .HasForeignKey("TableMeasurementResultId");
                        });

                    b.OwnsOne("Database.Common.DbPosition", "Location", b1 =>
                        {
                            b1.Property<long>("TableMeasurementResultId")
                                .HasColumnType("bigint");

                            b1.Property<double>("Altitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Precision")
                                .HasColumnType("double precision");

                            b1.Property<int>("Source")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("TimeStamp")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("TableMeasurementResultId");

                            b1.ToTable("MeasurementResult");

                            b1.WithOwner()
                                .HasForeignKey("TableMeasurementResultId");
                        });

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("TblMeasurementDefinition");

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Tables.TablePermission", b =>
                {
                    b.HasOne("Database.Tables.TableCompany", "TblCompany")
                        .WithMany("TblPermissions")
                        .HasForeignKey("TblCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Tables.TableUser", "TblUser")
                        .WithMany("TblPermissions")
                        .HasForeignKey("TblUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblCompany");

                    b.Navigation("TblUser");
                });

            modelBuilder.Entity("Database.Tables.TableProject", b =>
                {
                    b.HasOne("Database.Tables.TableCompany", "TblCompany")
                        .WithMany("TblProjects")
                        .HasForeignKey("TblCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Database.Common.DbInformation", "Information", b1 =>
                        {
                            b1.Property<long>("TableProjectId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("UpdatedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("TableProjectId");

                            b1.ToTable("Project");

                            b1.WithOwner()
                                .HasForeignKey("TableProjectId");
                        });

                    b.Navigation("Information")
                        .IsRequired();

                    b.Navigation("TblCompany");
                });

            modelBuilder.Entity("Database.Tables.TableUser", b =>
                {
                    b.HasOne("Database.Tables.TableFile", "TblUserImage")
                        .WithMany("TblUserImages")
                        .HasForeignKey("TblUserImageId");

                    b.Navigation("TblUserImage");
                });

            modelBuilder.Entity("IXchangeDatabase.Tables.TableAbo", b =>
                {
                    b.HasOne("IXchangeDatabase.Tables.TableMeasurementDefinitionAssignment", "TblMeasurementDefinitionAssignment")
                        .WithMany("TblAbos")
                        .HasForeignKey("TblMeasurementDefinitionAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Tables.TableUser", "TblUser")
                        .WithMany()
                        .HasForeignKey("TblUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblMeasurementDefinitionAssignment");

                    b.Navigation("TblUser");
                });

            modelBuilder.Entity("IXchangeDatabase.Tables.TableIncomeOutput", b =>
                {
                    b.HasOne("Database.Tables.TableMeasurementDefinition", "TblMeasurementDefinition")
                        .WithMany()
                        .HasForeignKey("TblMeasurementDefinitonId");

                    b.HasOne("Database.Tables.TableUser", "TblUser")
                        .WithMany()
                        .HasForeignKey("TblUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblMeasurementDefinition");

                    b.Navigation("TblUser");
                });

            modelBuilder.Entity("IXchangeDatabase.Tables.TableMeasurementDefinitionAssignment", b =>
                {
                    b.HasOne("Database.Tables.TableMeasurementDefinition", "TblMeasurementDefinition")
                        .WithMany()
                        .HasForeignKey("TblMeasurementDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblMeasurementDefinition");
                });

            modelBuilder.Entity("IXchangeDatabase.Tables.TableNotification", b =>
                {
                    b.HasOne("IXchangeDatabase.Tables.TableMeasurementDefinitionAssignment", "TblMeasurementDefinitionAssignment")
                        .WithMany("TblNotifications")
                        .HasForeignKey("TblMeasurementDefinitionAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Tables.TableUser", "TblUser")
                        .WithMany()
                        .HasForeignKey("TblUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblMeasurementDefinitionAssignment");

                    b.Navigation("TblUser");
                });

            modelBuilder.Entity("IXchangeDatabase.Tables.TableRating", b =>
                {
                    b.HasOne("IXchangeDatabase.Tables.TableMeasurementDefinitionAssignment", "TblMeasurementDefinitionAssignment")
                        .WithMany("TblRatings")
                        .HasForeignKey("TblMeasurementDefinitionAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Tables.TableUser", "TblUser")
                        .WithMany()
                        .HasForeignKey("TblUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblMeasurementDefinitionAssignment");

                    b.Navigation("TblUser");
                });

            modelBuilder.Entity("Database.Tables.TableCompany", b =>
                {
                    b.Navigation("TblCompanyGlobalConfigurations");

                    b.Navigation("TblGateways");

                    b.Navigation("TblPermissions");

                    b.Navigation("TblProjects");
                });

            modelBuilder.Entity("Database.Tables.TableCompanyGlobalConfig", b =>
                {
                    b.Navigation("TblIotDevice");
                });

            modelBuilder.Entity("Database.Tables.TableDataconverter", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("Database.Tables.TableFile", b =>
                {
                    b.Navigation("TblUserImages");
                });

            modelBuilder.Entity("Database.Tables.TableGateway", b =>
                {
                    b.Navigation("TblIotDevices");
                });

            modelBuilder.Entity("Database.Tables.TableIotDevice", b =>
                {
                    b.Navigation("TblMeasurementDefinitions");
                });

            modelBuilder.Entity("Database.Tables.TableMeasurementDefinition", b =>
                {
                    b.Navigation("TblMeasurementDefinitionToProjectAssignments");

                    b.Navigation("TblMeasurements");
                });

            modelBuilder.Entity("Database.Tables.TableProject", b =>
                {
                    b.Navigation("TblMeasurementDefinitionToProjectAssignments");
                });

            modelBuilder.Entity("Database.Tables.TableUser", b =>
                {
                    b.Navigation("TblAccessToken");

                    b.Navigation("TblDevices");

                    b.Navigation("TblPermissions");
                });

            modelBuilder.Entity("IXchangeDatabase.Tables.TableMeasurementDefinitionAssignment", b =>
                {
                    b.Navigation("TblAbos");

                    b.Navigation("TblNotifications");

                    b.Navigation("TblRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
