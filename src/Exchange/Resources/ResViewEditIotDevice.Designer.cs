//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Exchange.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class ResViewEditIotDevice {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ResViewEditIotDevice() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Exchange.Resources.ResViewEditIotDevice", typeof(ResViewEditIotDevice).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Über Karte auswählen.
        /// </summary>
        public static string LblChooseOnMap {
            get {
                return ResourceManager.GetString("LblChooseOnMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Codearea.
        /// </summary>
        public static string LblCodeArea {
            get {
                return ResourceManager.GetString("LblCodeArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Convertertyp.
        /// </summary>
        public static string LblConverterType {
            get {
                return ResourceManager.GetString("LblConverterType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quelle der Position.
        /// </summary>
        public static string LblPositionSource {
            get {
                return ResourceManager.GetString("LblPositionSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Secret.
        /// </summary>
        public static string LblSecret {
            get {
                return ResourceManager.GetString("LblSecret", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Secret eingeben oder generieren.
        /// </summary>
        public static string LblSecretCheckBox {
            get {
                return ResourceManager.GetString("LblSecretCheckBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Upstream.
        /// </summary>
        public static string LblUpstream {
            get {
                return ResourceManager.GetString("LblUpstream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IoT-Gerät.
        /// </summary>
        public static string PageTitle {
            get {
                return ResourceManager.GetString("PageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IoT-Gerät erstellen oder bearbeiten.
        /// </summary>
        public static string SubTitle {
            get {
                return ResourceManager.GetString("SubTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Geben sie die BoxID Ihres Sensors an..
        /// </summary>
        public static string Txt_BoxIdInfoModal {
            get {
                return ResourceManager.GetString("Txt_BoxIdInfoModal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hier können Sie mittels C# Code selber den vom Sensor gesendeten Input konvertieren. Sobald Messwertdefinitionen dem Sensor hinzugefügt werden, werden diese wie in folgendem Beispiel angezeigt. Es folgt ein Beispiel-Code, in welchem Fall der Input als Byte-Array direkt zu einem Text konvertiert wird. Je nach gesendetem Datentyp muss das jeweilige Property für die Konvertierung verwendet werden..
        /// </summary>
        public static string Txt_ConverterTypeModal {
            get {
                return ResourceManager.GetString("Txt_ConverterTypeModal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MeasurementBool für Bit/Boolean - bool.
        /// </summary>
        public static string Txt_ConverterTypeModal_MeasurementBool {
            get {
                return ResourceManager.GetString("Txt_ConverterTypeModal_MeasurementBool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MeasurementImage für Bild als Datenarray - byte[].
        /// </summary>
        public static string Txt_ConverterTypeModal_MeasurementImage {
            get {
                return ResourceManager.GetString("Txt_ConverterTypeModal_MeasurementImage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MeasurementNumber für Zahl - double.
        /// </summary>
        public static string Txt_ConverterTypeModal_MeasurementNumber {
            get {
                return ResourceManager.GetString("Txt_ConverterTypeModal_MeasurementNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MeasurementRaw für ein Byte Array - byte[].
        /// </summary>
        public static string Txt_ConverterTypeModal_MeasurementRaw {
            get {
                return ResourceManager.GetString("Txt_ConverterTypeModal_MeasurementRaw", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MeasurementText für Text - string.
        /// </summary>
        public static string Txt_ConverterTypeModal_MeasurementText {
            get {
                return ResourceManager.GetString("Txt_ConverterTypeModal_MeasurementText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Die zugehörigen Properties für die jeweiligen Werte sind.
        /// </summary>
        public static string Txt_ConverterTypeModal_Properties {
            get {
                return ResourceManager.GetString("Txt_ConverterTypeModal_Properties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Für den PC-Sensor starten Sie bitte die Sensor-Applikation auf einem PC. Unterstützt wird hierbei die Übertragungsart &quot;{0}&quot;..
        /// </summary>
        public static string Txt_PlattformModal1 {
            get {
                return ResourceManager.GetString("Txt_PlattformModal1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Für den Raspberry Pi-Sensor starten Sie bitte die Sensor-Applikation auf einem Raspberry Pi. Unterstützt wird hierbei die Übertragungsart &quot;{0}&quot;..
        /// </summary>
        public static string Txt_PlattformModal2 {
            get {
                return ResourceManager.GetString("Txt_PlattformModal2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Für den OpenSense-Sensor geben Sie bitte die {0} ein..
        /// </summary>
        public static string Txt_PlattformModal3 {
            get {
                return ResourceManager.GetString("Txt_PlattformModal3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Für den ESP32, laden Sie das Firmware Projekt herunter, ändern die TTN Konfigurationswerte, flashen die Firmware auf das Gerät und starten dieses..
        /// </summary>
        public static string Txt_PlattformModal4 {
            get {
                return ResourceManager.GetString("Txt_PlattformModal4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dieser beschreibt einen Sensor, welche ohne de Firmware unseres Firmware Projekts läuft und Daten sendet. Hiebrei kann selbst mittels C# Code eingestellt werden wie die Daten konvertiert werden..
        /// </summary>
        public static string Txt_PlattformModal5 {
            get {
                return ResourceManager.GetString("Txt_PlattformModal5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Der TCP Sensor hat ein Secret um ihn identifizieren zu können. Starten Sie die TCP-Sensor Applikation (downloadbar in Menüpunkt &quot;Inbetriebnahme&quot;) und geben Sie dort dieses Secret ein oder geben Sie hier das Secret der TCP-Sensor Applikation ein..
        /// </summary>
        public static string Txt_SecretModal {
            get {
                return ResourceManager.GetString("Txt_SecretModal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Upstream beschreibt über welche Art der Sensor seine Daten dem Gateway überträgt..
        /// </summary>
        public static string Txt_UpstreamModal {
            get {
                return ResourceManager.GetString("Txt_UpstreamModal", resourceCulture);
            }
        }
    }
}
